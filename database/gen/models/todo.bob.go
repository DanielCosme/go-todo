// Code generated by BobGen sqlite v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Todo is an object representing the database table.
type Todo struct {
	ID        int64  `db:"id,pk" `
	ProjectID int64  `db:"project_id" `
	Title     string `db:"title" `
	Done      bool   `db:"done" `

	R todoR `db:"-" `
}

// TodoSlice is an alias for a slice of pointers to Todo.
// This should almost always be used instead of []*Todo.
type TodoSlice []*Todo

// Todos contains methods to work with the todo table
var Todos = sqlite.NewTablex[*Todo, TodoSlice, *TodoSetter]("", "todo", buildTodoColumns("todo"))

// TodosQuery is a query on the todo table
type TodosQuery = *sqlite.ViewQuery[*Todo, TodoSlice]

// todoR is where relationships are stored.
type todoR struct {
	Project *Project // fk_todo_0
}

func buildTodoColumns(alias string) todoColumns {
	return todoColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "project_id", "title", "done",
		).WithParent("todo"),
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
		ProjectID:  sqlite.Quote(alias, "project_id"),
		Title:      sqlite.Quote(alias, "title"),
		Done:       sqlite.Quote(alias, "done"),
	}
}

type todoColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         sqlite.Expression
	ProjectID  sqlite.Expression
	Title      sqlite.Expression
	Done       sqlite.Expression
}

func (c todoColumns) Alias() string {
	return c.tableAlias
}

func (todoColumns) AliasedAs(alias string) todoColumns {
	return buildTodoColumns(alias)
}

// TodoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TodoSetter struct {
	ID        *int64  `db:"id,pk" `
	ProjectID *int64  `db:"project_id" `
	Title     *string `db:"title" `
	Done      *bool   `db:"done" `
}

func (s TodoSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID != nil {
		vals = append(vals, "id")
	}
	if s.ProjectID != nil {
		vals = append(vals, "project_id")
	}
	if s.Title != nil {
		vals = append(vals, "title")
	}
	if s.Done != nil {
		vals = append(vals, "done")
	}
	return vals
}

func (s TodoSetter) Overwrite(t *Todo) {
	if s.ID != nil {
		t.ID = func() int64 {
			if s.ID == nil {
				return *new(int64)
			}
			return *s.ID
		}()
	}
	if s.ProjectID != nil {
		t.ProjectID = func() int64 {
			if s.ProjectID == nil {
				return *new(int64)
			}
			return *s.ProjectID
		}()
	}
	if s.Title != nil {
		t.Title = func() string {
			if s.Title == nil {
				return *new(string)
			}
			return *s.Title
		}()
	}
	if s.Done != nil {
		t.Done = func() bool {
			if s.Done == nil {
				return *new(bool)
			}
			return *s.Done
		}()
	}
}

func (s *TodoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Todos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 4)
		if s.ID != nil {
			vals = append(vals, sqlite.Arg(func() int64 {
				if s.ID == nil {
					return *new(int64)
				}
				return *s.ID
			}()))
		}

		if s.ProjectID != nil {
			vals = append(vals, sqlite.Arg(func() int64 {
				if s.ProjectID == nil {
					return *new(int64)
				}
				return *s.ProjectID
			}()))
		}

		if s.Title != nil {
			vals = append(vals, sqlite.Arg(func() string {
				if s.Title == nil {
					return *new(string)
				}
				return *s.Title
			}()))
		}

		if s.Done != nil {
			vals = append(vals, sqlite.Arg(func() bool {
				if s.Done == nil {
					return *new(bool)
				}
				return *s.Done
			}()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TodoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TodoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.ProjectID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "project_id")...),
			sqlite.Arg(s.ProjectID),
		}})
	}

	if s.Title != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "title")...),
			sqlite.Arg(s.Title),
		}})
	}

	if s.Done != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "done")...),
			sqlite.Arg(s.Done),
		}})
	}

	return exprs
}

// FindTodo retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTodo(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Todo, error) {
	if len(cols) == 0 {
		return Todos.Query(
			sm.Where(Todos.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Todos.Query(
		sm.Where(Todos.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(Todos.Columns.Only(cols...)),
	).One(ctx, exec)
}

// TodoExists checks the presence of a single record by primary key
func TodoExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Todos.Query(
		sm.Where(Todos.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Todo is retrieved from the database
func (o *Todo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Todos.AfterSelectHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Todos.AfterInsertHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, TodoSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Todo
func (o *Todo) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Todo) pkEQ() dialect.Expression {
	return sqlite.Quote("todo", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Todo
func (o *Todo) Update(ctx context.Context, exec bob.Executor, s *TodoSetter) error {
	v, err := Todos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Todo record with an executor
func (o *Todo) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Todos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Todo using the executor
func (o *Todo) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Todos.Query(
		sm.Where(Todos.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TodoSlice is retrieved from the database
func (o TodoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Todos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Todos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TodoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("todo", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TodoSlice) copyMatchingRows(from ...*Todo) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TodoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Todos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Todo:
				o.copyMatchingRows(retrieved)
			case []*Todo:
				o.copyMatchingRows(retrieved...)
			case TodoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Todo or a slice of Todo
				// then run the AfterUpdateHooks on the slice
				_, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TodoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Todos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Todo:
				o.copyMatchingRows(retrieved)
			case []*Todo:
				o.copyMatchingRows(retrieved...)
			case TodoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Todo or a slice of Todo
				// then run the AfterDeleteHooks on the slice
				_, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TodoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TodoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Todos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TodoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Todos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TodoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Todos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Project starts a query for related objects on project
func (o *Todo) Project(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	return Projects.Query(append(mods,
		sm.Where(Projects.Columns.ID.EQ(sqlite.Arg(o.ProjectID))),
	)...)
}

func (os TodoSlice) Project(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ProjectID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Projects.Query(append(mods,
		sm.Where(sqlite.Group(Projects.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachTodoProject0(ctx context.Context, exec bob.Executor, count int, todo0 *Todo, project1 *Project) (*Todo, error) {
	setter := &TodoSetter{
		ProjectID: func() *int64 { return &project1.ID }(),
	}

	err := todo0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTodoProject0: %w", err)
	}

	return todo0, nil
}

func (todo0 *Todo) InsertProject(ctx context.Context, exec bob.Executor, related *ProjectSetter) error {
	var err error

	project1, err := Projects.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTodoProject0(ctx, exec, 1, todo0, project1)
	if err != nil {
		return err
	}

	todo0.R.Project = project1

	project1.R.Todos = append(project1.R.Todos, todo0)

	return nil
}

func (todo0 *Todo) AttachProject(ctx context.Context, exec bob.Executor, project1 *Project) error {
	var err error

	_, err = attachTodoProject0(ctx, exec, 1, todo0, project1)
	if err != nil {
		return err
	}

	todo0.R.Project = project1

	project1.R.Todos = append(project1.R.Todos, todo0)

	return nil
}

type todoWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int64]
	ProjectID sqlite.WhereMod[Q, int64]
	Title     sqlite.WhereMod[Q, string]
	Done      sqlite.WhereMod[Q, bool]
}

func (todoWhere[Q]) AliasedAs(alias string) todoWhere[Q] {
	return buildTodoWhere[Q](buildTodoColumns(alias))
}

func buildTodoWhere[Q sqlite.Filterable](cols todoColumns) todoWhere[Q] {
	return todoWhere[Q]{
		ID:        sqlite.Where[Q, int64](cols.ID),
		ProjectID: sqlite.Where[Q, int64](cols.ProjectID),
		Title:     sqlite.Where[Q, string](cols.Title),
		Done:      sqlite.Where[Q, bool](cols.Done),
	}
}

func (o *Todo) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Project":
		rel, ok := retrieved.(*Project)
		if !ok {
			return fmt.Errorf("todo cannot load %T as %q", retrieved, name)
		}

		o.R.Project = rel

		if rel != nil {
			rel.R.Todos = TodoSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("todo has no relationship %q", name)
	}
}

type todoPreloader struct {
	Project func(...sqlite.PreloadOption) sqlite.Preloader
}

func buildTodoPreloader() todoPreloader {
	return todoPreloader{
		Project: func(opts ...sqlite.PreloadOption) sqlite.Preloader {
			return sqlite.Preload[*Project, ProjectSlice](sqlite.PreloadRel{
				Name: "Project",
				Sides: []sqlite.PreloadSide{
					{
						From:        Todos,
						To:          Projects,
						FromColumns: []string{"project_id"},
						ToColumns:   []string{"id"},
					},
				},
			}, Projects.Columns.Names(), opts...)
		},
	}
}

type todoThenLoader[Q orm.Loadable] struct {
	Project func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildTodoThenLoader[Q orm.Loadable]() todoThenLoader[Q] {
	type ProjectLoadInterface interface {
		LoadProject(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return todoThenLoader[Q]{
		Project: thenLoadBuilder[Q](
			"Project",
			func(ctx context.Context, exec bob.Executor, retrieved ProjectLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadProject(ctx, exec, mods...)
			},
		),
	}
}

// LoadProject loads the todo's Project into the .R struct
func (o *Todo) LoadProject(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Project = nil

	related, err := o.Project(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Todos = TodoSlice{o}

	o.R.Project = related
	return nil
}

// LoadProject loads the todo's Project into the .R struct
func (os TodoSlice) LoadProject(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	projects, err := os.Project(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range projects {

			if !(o.ProjectID == rel.ID) {
				continue
			}

			rel.R.Todos = append(rel.R.Todos, o)

			o.R.Project = rel
			break
		}
	}

	return nil
}

type todoJoins[Q dialect.Joinable] struct {
	typ     string
	Project modAs[Q, projectColumns]
}

func (j todoJoins[Q]) aliasedAs(alias string) todoJoins[Q] {
	return buildTodoJoins[Q](buildTodoColumns(alias), j.typ)
}

func buildTodoJoins[Q dialect.Joinable](cols todoColumns, typ string) todoJoins[Q] {
	return todoJoins[Q]{
		typ: typ,
		Project: modAs[Q, projectColumns]{
			c: Projects.Columns,
			f: func(to projectColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Projects.Name().As(to.Alias())).On(
						to.ID.EQ(cols.ProjectID),
					))
				}

				return mods
			},
		},
	}
}
