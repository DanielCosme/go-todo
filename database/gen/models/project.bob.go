// Code generated by BobGen sqlite v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"fmt"
	"io"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/dm"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Project is an object representing the database table.
type Project struct {
	ID   int64  `db:"id,pk" `
	Name string `db:"name" `

	R projectR `db:"-" `
}

// ProjectSlice is an alias for a slice of pointers to Project.
// This should almost always be used instead of []*Project.
type ProjectSlice []*Project

// Projects contains methods to work with the project table
var Projects = sqlite.NewTablex[*Project, ProjectSlice, *ProjectSetter]("", "project", buildProjectColumns("project"))

// ProjectsQuery is a query on the project table
type ProjectsQuery = *sqlite.ViewQuery[*Project, ProjectSlice]

// projectR is where relationships are stored.
type projectR struct {
	Todos TodoSlice // fk_todo_0
}

func buildProjectColumns(alias string) projectColumns {
	return projectColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "name",
		).WithParent("project"),
		tableAlias: alias,
		ID:         sqlite.Quote(alias, "id"),
		Name:       sqlite.Quote(alias, "name"),
	}
}

type projectColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         sqlite.Expression
	Name       sqlite.Expression
}

func (c projectColumns) Alias() string {
	return c.tableAlias
}

func (projectColumns) AliasedAs(alias string) projectColumns {
	return buildProjectColumns(alias)
}

// ProjectSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProjectSetter struct {
	ID   *int64  `db:"id,pk" `
	Name *string `db:"name" `
}

func (s ProjectSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if s.ID != nil {
		vals = append(vals, "id")
	}
	if s.Name != nil {
		vals = append(vals, "name")
	}
	return vals
}

func (s ProjectSetter) Overwrite(t *Project) {
	if s.ID != nil {
		t.ID = func() int64 {
			if s.ID == nil {
				return *new(int64)
			}
			return *s.ID
		}()
	}
	if s.Name != nil {
		t.Name = func() string {
			if s.Name == nil {
				return *new(string)
			}
			return *s.Name
		}()
	}
}

func (s *ProjectSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Projects.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	if len(q.TableRef.Columns) == 0 {
		q.TableRef.Columns = s.SetColumns()
		if len(q.TableRef.Columns) == 0 {
			q.TableRef.Columns = []string{"id"}
		}

	}

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 0, 2)
		if s.ID != nil {
			vals = append(vals, sqlite.Arg(func() int64 {
				if s.ID == nil {
					return *new(int64)
				}
				return *s.ID
			}()))
		}

		if s.Name != nil {
			vals = append(vals, sqlite.Arg(func() string {
				if s.Name == nil {
					return *new(string)
				}
				return *s.Name
			}()))
		}

		if len(vals) == 0 {
			vals = append(vals, sqlite.Arg(nil))
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ProjectSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ProjectSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if s.Name != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	return exprs
}

// FindProject retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProject(ctx context.Context, exec bob.Executor, IDPK int64, cols ...string) (*Project, error) {
	if len(cols) == 0 {
		return Projects.Query(
			sm.Where(Projects.Columns.ID.EQ(sqlite.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Projects.Query(
		sm.Where(Projects.Columns.ID.EQ(sqlite.Arg(IDPK))),
		sm.Columns(Projects.Columns.Only(cols...)),
	).One(ctx, exec)
}

// ProjectExists checks the presence of a single record by primary key
func ProjectExists(ctx context.Context, exec bob.Executor, IDPK int64) (bool, error) {
	return Projects.Query(
		sm.Where(Projects.Columns.ID.EQ(sqlite.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Project is retrieved from the database
func (o *Project) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Projects.AfterSelectHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Projects.AfterInsertHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, ProjectSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Project
func (o *Project) primaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

func (o *Project) pkEQ() dialect.Expression {
	return sqlite.Quote("project", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Project
func (o *Project) Update(ctx context.Context, exec bob.Executor, s *ProjectSetter) error {
	v, err := Projects.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Project record with an executor
func (o *Project) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Projects.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Project using the executor
func (o *Project) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Projects.Query(
		sm.Where(Projects.Columns.ID.EQ(sqlite.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ProjectSlice is retrieved from the database
func (o ProjectSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Projects.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Projects.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ProjectSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return sqlite.Raw("NULL")
	}

	return sqlite.Quote("project", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ProjectSlice) copyMatchingRows(from ...*Project) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ProjectSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Projects.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Project:
				o.copyMatchingRows(retrieved)
			case []*Project:
				o.copyMatchingRows(retrieved...)
			case ProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Project or a slice of Project
				// then run the AfterUpdateHooks on the slice
				_, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ProjectSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Projects.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Project:
				o.copyMatchingRows(retrieved)
			case []*Project:
				o.copyMatchingRows(retrieved...)
			case ProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Project or a slice of Project
				// then run the AfterDeleteHooks on the slice
				_, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ProjectSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProjectSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Projects.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ProjectSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Projects.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ProjectSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Projects.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Todos starts a query for related objects on todo
func (o *Project) Todos(mods ...bob.Mod[*dialect.SelectQuery]) TodosQuery {
	return Todos.Query(append(mods,
		sm.Where(Todos.Columns.ProjectID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os ProjectSlice) Todos(mods ...bob.Mod[*dialect.SelectQuery]) TodosQuery {
	PKArgSlice := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgSlice[i] = sqlite.ArgGroup(o.ID)
	}
	PKArgExpr := sqlite.Group(PKArgSlice...)

	return Todos.Query(append(mods,
		sm.Where(sqlite.Group(Todos.Columns.ProjectID).OP("IN", PKArgExpr)),
	)...)
}

func insertProjectTodos0(ctx context.Context, exec bob.Executor, todos1 []*TodoSetter, project0 *Project) (TodoSlice, error) {
	for i := range todos1 {
		todos1[i].ProjectID = func() *int64 { return &project0.ID }()
	}

	ret, err := Todos.Insert(bob.ToMods(todos1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertProjectTodos0: %w", err)
	}

	return ret, nil
}

func attachProjectTodos0(ctx context.Context, exec bob.Executor, count int, todos1 TodoSlice, project0 *Project) (TodoSlice, error) {
	setter := &TodoSetter{
		ProjectID: func() *int64 { return &project0.ID }(),
	}

	err := todos1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachProjectTodos0: %w", err)
	}

	return todos1, nil
}

func (project0 *Project) InsertTodos(ctx context.Context, exec bob.Executor, related ...*TodoSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	todos1, err := insertProjectTodos0(ctx, exec, related, project0)
	if err != nil {
		return err
	}

	project0.R.Todos = append(project0.R.Todos, todos1...)

	for _, rel := range todos1 {
		rel.R.Project = project0
	}
	return nil
}

func (project0 *Project) AttachTodos(ctx context.Context, exec bob.Executor, related ...*Todo) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	todos1 := TodoSlice(related)

	_, err = attachProjectTodos0(ctx, exec, len(related), todos1, project0)
	if err != nil {
		return err
	}

	project0.R.Todos = append(project0.R.Todos, todos1...)

	for _, rel := range related {
		rel.R.Project = project0
	}

	return nil
}

type projectWhere[Q sqlite.Filterable] struct {
	ID   sqlite.WhereMod[Q, int64]
	Name sqlite.WhereMod[Q, string]
}

func (projectWhere[Q]) AliasedAs(alias string) projectWhere[Q] {
	return buildProjectWhere[Q](buildProjectColumns(alias))
}

func buildProjectWhere[Q sqlite.Filterable](cols projectColumns) projectWhere[Q] {
	return projectWhere[Q]{
		ID:   sqlite.Where[Q, int64](cols.ID),
		Name: sqlite.Where[Q, string](cols.Name),
	}
}

func (o *Project) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Todos":
		rels, ok := retrieved.(TodoSlice)
		if !ok {
			return fmt.Errorf("project cannot load %T as %q", retrieved, name)
		}

		o.R.Todos = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Project = o
			}
		}
		return nil
	default:
		return fmt.Errorf("project has no relationship %q", name)
	}
}

type projectPreloader struct{}

func buildProjectPreloader() projectPreloader {
	return projectPreloader{}
}

type projectThenLoader[Q orm.Loadable] struct {
	Todos func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildProjectThenLoader[Q orm.Loadable]() projectThenLoader[Q] {
	type TodosLoadInterface interface {
		LoadTodos(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return projectThenLoader[Q]{
		Todos: thenLoadBuilder[Q](
			"Todos",
			func(ctx context.Context, exec bob.Executor, retrieved TodosLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadTodos(ctx, exec, mods...)
			},
		),
	}
}

// LoadTodos loads the project's Todos into the .R struct
func (o *Project) LoadTodos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Todos = nil

	related, err := o.Todos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Project = o
	}

	o.R.Todos = related
	return nil
}

// LoadTodos loads the project's Todos into the .R struct
func (os ProjectSlice) LoadTodos(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	todos, err := os.Todos(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		o.R.Todos = nil
	}

	for _, o := range os {
		if o == nil {
			continue
		}

		for _, rel := range todos {

			if !(o.ID == rel.ProjectID) {
				continue
			}

			rel.R.Project = o

			o.R.Todos = append(o.R.Todos, rel)
		}
	}

	return nil
}

type projectJoins[Q dialect.Joinable] struct {
	typ   string
	Todos modAs[Q, todoColumns]
}

func (j projectJoins[Q]) aliasedAs(alias string) projectJoins[Q] {
	return buildProjectJoins[Q](buildProjectColumns(alias), j.typ)
}

func buildProjectJoins[Q dialect.Joinable](cols projectColumns, typ string) projectJoins[Q] {
	return projectJoins[Q]{
		typ: typ,
		Todos: modAs[Q, todoColumns]{
			c: Todos.Columns,
			f: func(to todoColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Todos.Name().As(to.Alias())).On(
						to.ProjectID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}
